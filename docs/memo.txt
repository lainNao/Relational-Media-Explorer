■目次
	＜tmp＞
		タスク一覧
		後でやるかもしれないリスト
	＜固定＞
		■仕様
			仕様となったもの
			仕様の過去の考え

■種類
	＜後でやるかもしれないリスト＞
		■種類
			＜キャッシュ＞
				ミューテーションとクエリーが1クライアントしか操作しないからrtkqueryみたいに制御しやすいはず
				ただ今はいい
	＜仕様となったもの＞
		■データミューテーション（追加、編集、削除）
			・jiraのようにその画面内でできる限り行えるようにし、モーダルはできる限り作らない（面倒なため）
		■データ取得
			・特に非正規化した表示用データは作らない。正規化したデータを毎回フェッチかけて表示させる。（Jiraがそうなので、その程度の速度は出せるだろうとの目測）
		■アーキテクチャ
			＜開発環境＞
				・OpenAPIでいろいろ自動生成してみたい
			＜フロント＞
				・React+TS
			＜バックエンド＞
				・Express+TS+Prisma
				・MVCベース（コントローラ、ユースケース、DAO）
					・コントローラはユースケースを呼ぶだけの、WEBの入り口にしておく（CLIだけでもユースケースを叩けるように）
					・いわゆるサービスはユースケースという名前で使う（サービスという名前が意味わからんなと思っていて避けたいので）
					・DAOの内部でPrismaを使う
						・なぜrepositoryじゃなくDAOなのかは、集約という概念を作らないから
						・なぜ集約という概念を作らないかは、データ的に1集約が巨大すぎる気がするから（というかこれをどう集約化したらいいかわからないし、たぶん考えても妥当な集約が浮かばなさそうなので）
							・ただし一応別途DAOの戻値はエンティティにし、簡素に不変条件はできる限り入れておく。できる限り自動テストでも仕様を担保したい
	＜タスク一覧＞
		■設計
			＜キャッシュ設計＞
				・ユースケース一覧とAPI一覧とUIのデザインが終わったら、rtkqueryやreact-queryでAPIのキャッシュ戦略を考える
				・いやそれだとアプリ閉じたらキャッシュ消えるな…localStorageに保存できないのかな…？
					・できないならバックエンド側でキャッシュを永続化できるようにしたほうがいいな…
					・最悪クライアント側で独自のキャッシュ機構をかましてもいい
			＜テスト戦略＞
				・先に考えておきたい
				・どういうテストをすべきで、どう実装すべきか
				・TDDやるかどうか
			＜レイアウトの要件を決め、それの実装検証もする＞
				・単に右側を詳細とするだけでよいか？もっと横幅広く見たい時とかあるならモーダルのほうがよい場合もあるのでは？または上下に表示するとか…
				・レイアウトの設定できるようにするとかしたい人いると思うけど、どうする？
				・かつ各パネルの幅を自分でドラッグで調整したいよねという。elastic uiにはあったけど何使う？
		■検証
			＜非正規化しないつもりだけど、それで例えば1万データ入ってたら大丈夫か＞
				・1万データ入れて動かしてみる
				・sqlのみで試していいと思う
				・これはelectronでsqliteの環境整えてから
				・一番パフォーマンスが気になりそうなAPIを先に作って、それのパフォーマンスを計測する
			＜事前にDBだけ用意してシーダー作ってパフォーマンステストする＞
				・どのくらいのデータでどのくらいの速度になるのか
				・APIも作っちゃえばいいね
		■仕様
			＜メディアを押下したら、それ用の実行ファイルに再生を依頼したいな＞
				・わざわざelectron内で再生しなくてもいいはず（音声、映像、画像においては）
				・それが良さげならそうする。そうでないなら普通にelectron内で再生する
			＜表示形式、テーブル形式かインデント形式か決める＞
				・もしかしたらテーブル形式でも全然いいかもねという…syncfusionがそういうの対応してたりするかもだし
		■実装
			＜セルの関連をあらわすテーブル構造が現在のcell_relationsテーブルの設計で大丈夫か確かめる＞
				・これでaからb、bからaどちらもいけるか
				・これもsqlレベルで試せばいい
			＜２つのプロセスをどう使い分けるか＞
				・実装の設計時したほうがいいな…
			＜sqlite使うにはどうすればいいか＞
				・前回諦めたけど…
			＜簡単にリレーションを設定させたい＞
				・工夫してほしい
			＜sync◯usionで使えるコンポーネント無いか考える＞
				・階層構造とか、テーブルとか
	＜仕様の過去の考え＞
		■種類
			＜「カラムは特定テーブルのみに属さず、複数テーブルから紐付けられるようにする」を思いついたけど、それはしない＞
				・これやると「アーティスト」というカラムをいろんなテーブルで使えるようになるけど、データ共有すると「こっちのテーブルでは要らないデータ」みたいなのが出てきて面倒になると想像できた
				・だから、まあ一応「テーブルが違う場合ドメインが違うのだから共有しない」でいいと思う
			＜「前まで作ってた創作技法集のサイトのjsonを生成するクライアントを作るだけじゃ駄目なのか」は、駄目＞
				・それでもいいっちゃいいけど、なんか感覚で駄目な気がしてるから一旦駄目
				・レイアウトを動的にjsonで指定できるようにしたら汎用性出るしそれでいいかなとも思えたけど、なんか出てきそうだから一旦無し
			＜「無限階層は無し」かと思ったけど、ディレクトリとかテーブルのところは無しにしたけど、メインペインのインデントカラムのところはありにした＞
				・そこが固定階層なのはやっぱどうしてもおかしい気がするから
			＜ファイルの配置や削除はどう対応するか（たしか前回そこで若干困った記憶が）＞
				・たしか無限階層だったことで、削除するファイルを辿れなかったみたいな都合だった気がする
				・今回は論理削除されたセルを任意のタイミングで削除するボタン作ればイケルと思う
			＜「表示アプリとデータ編集アプリは別にしたらいいのでは」と思ったけど、しない＞
				・逆に面倒になる気がしたため。
					・もちろん前の創作技法集のあれをそのまま使うならそれはありだったかもだけど、自作するなら違う気がする
				・画面も一緒なjira方式がいいと思う。前モーダルとかいちいち作ってだるかったから、モーダル辞めろ。面倒だから基本的に全部jira方式で。
			＜前のあの創作技法のサイトじゃ駄目なのか？＞
				・若干機能が足りない。特に画像に関するもの。
					・例えば広告画像のテクをまとめたい時、「青いやつ」で並べ替えしたい時もあるだろうし、「こういうテクを使ってるやつ」で並べ替えしたい時もあるだろうから、そこがあれじゃなんかできるかわからない。
					・同じように音楽もカタルシスで並べ替えしたい時もあるだろうし、アーティストで並べ替えしたい時もあるだろうし、ジャンルで並べ替えしたい時もあるだろうしっていう。
					・あの創作技術のサイトは、だから機能が少ないんだよね。技法並べる機能だけはあるけど、作品そのものをエクスプロールする機能は無い。で、それもできればほしい感じかな…
						・これアプリ分ければいいのかな…
			＜表示用の非正規化はどうするか＞
				・まず必要そうかどうか
				・「いらない」という結論なら一番楽だしUXもいいと思う。例えばjiraはそうだろうし。
				・もしいるなら以下
					・どのタイミングで行うかと、どういう形式に出力するかを考え抜いておきたい。UX問題も含め。
					・確かにwriteだけ軽く、readが毎回重いなら微妙だしな…
						・キャッシュがあるならキャッシュから、キャッシュが無い（または古い）ならリードスルーキャッシュみたいな形でいいのでは…？（最終更新日時と照らし合わせる必要もあるけど）
					・その設計が終わったらdatabase.dbmlの方にも反映必要ならする
				・writeする段階で2段階書き込みすればいいのでは？正規化したテーブルと、非正規化したテーブルに。それが一番UXでもパフォーマンスでも楽な気がする。再生成じゃなくて一部追加や一部削除みたいになるから、非正規化データの更新スピードもそこまで重くないだろうし
					・いや、グローバルステートも含めれば3段階のミューテーションだ…まあいいかUXのためだ
				・いや、やっぱ非正規化はしない。グローバルステートに保存も特にはしない。
			＜rtkqueryみたいなキャッシュ管理できないかな＞
				・それができれば完全最適化できるんだけど…
				・レンダープロセスとメインプロセスの間の通信をhttpリクエストみたいに騙せたらいいんだけどできたりするのかな
				・もしできないとしても、似たことできるライブラリあるはずだし探したい。もし無いなら自作する価値はあるかもしれないね（できるかは別として。まずは徹底的に探すことが先だけど…redisでも似たことできたかもだし）
					・要するにプロキシ層を作ればいいだけだな。その層に、とあるエンティティへのリクエストがクエリーが最後ならキャッシュから出して、ミューテーションが最後なら新規でフェッチしてキャッシュみたいな実装だと思う
				・http-requestでメインプロセスに問い合わせるのは見つからなかった。node-cacheとかそういうの使って自作するしかなさそう

