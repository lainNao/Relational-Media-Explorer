■目次
	＜tmp＞
		タスク一覧
	＜固定＞
		仕様となったもの
		仕様の過去の考え

■種類
	＜仕様となったもの＞
		■データミューテーション（追加、編集、削除）
			・jiraのようにその画面内でできる限り行えるようにし、モーダルはできる限り作らない（面倒なため）
		■データ取得
			・特に非正規化した表示用データは作らない。正規化したデータを毎回フェッチかけて表示させる。（Jiraがそうなので、その程度の速度は出せるだろうとの目測）
	＜タスク一覧＞
		■仕様
			＜表示形式、テーブル形式かインデント形式か決める＞
				・もしかしたらテーブル形式でも全然いいかもねという…syncfusionがそういうの対応してたりするかもだし
		■実装
			＜非正規化しないつもりだけど、それで例えば1万データ入ってたら大丈夫か＞
				・1万データ入れて動かしてみる
			＜セルの関連をあらわすテーブル構造が現在のcell_relationsテーブルの設計で大丈夫か確かめる＞
				・これでaからb、bからaどちらもいけるか
			＜２つのプロセスをどう使い分けるか＞
				・実装の設計時したほうがいいな…
			＜sqlite使うにはどうすればいいか＞
				・前回諦めたけど…
			＜syncfusionで使えるコンポーネント無いか考える＞
				・階層構造とか、テーブルとか
	＜仕様の過去の考え＞
		■種類
			＜「カラムは特定テーブルのみに属さず、複数テーブルから紐付けられるようにする」を思いついたけど、それはしない＞
				・これやると「アーティスト」というカラムをいろんなテーブルで使えるようになるけど、データ共有すると「こっちのテーブルでは要らないデータ」みたいなのが出てきて面倒になると想像できた
				・だから、まあ一応「テーブルが違う場合ドメインが違うのだから共有しない」でいいと思う
			＜「前まで作ってた創作技法集のサイトのjsonを生成するクライアントを作るだけじゃ駄目なのか」は、駄目＞
				・それでもいいっちゃいいけど、なんか感覚で駄目な気がしてるから一旦駄目
				・レイアウトを動的にjsonで指定できるようにしたら汎用性出るしそれでいいかなとも思えたけど、なんか出てきそうだから一旦無し
			＜「無限階層は無し」かと思ったけど、ディレクトリとかテーブルのところは無しにしたけど、メインペインのインデントカラムのところはありにした＞
				・そこが固定階層なのはやっぱどうしてもおかしい気がするから
			＜ファイルの配置や削除はどう対応するか（たしか前回そこで若干困った記憶が）＞
				・たしか無限階層だったことで、削除するファイルを辿れなかったみたいな都合だった気がする
				・今回は論理削除されたセルを任意のタイミングで削除するボタン作ればイケルと思う
			＜「表示アプリとデータ編集アプリは別にしたらいいのでは」と思ったけど、しない＞
				・逆に面倒になる気がしたため。
					・もちろん前の創作技法集のあれをそのまま使うならそれはありだったかもだけど、自作するなら違う気がする
				・画面も一緒なjira方式がいいと思う。前モーダルとかいちいち作ってだるかったから、モーダル辞めろ。面倒だから基本的に全部jira方式で。
			＜表示用の非正規化はどうするか＞
				・まず必要そうかどうか
				・「いらない」という結論なら一番楽だしUXもいいと思う。例えばjiraはそうだろうし。
				・もしいるなら以下
					・どのタイミングで行うかと、どういう形式に出力するかを考え抜いておきたい。UX問題も含め。
					・確かにwriteだけ軽く、readが毎回重いなら微妙だしな…
						・キャッシュがあるならキャッシュから、キャッシュが無い（または古い）ならリードスルーキャッシュみたいな形でいいのでは…？（最終更新日時と照らし合わせる必要もあるけど）
					・その設計が終わったらdatabase.dbmlの方にも反映必要ならする
				・writeする段階で2段階書き込みすればいいのでは？正規化したテーブルと、非正規化したテーブルに。それが一番UXでもパフォーマンスでも楽な気がする。再生成じゃなくて一部追加や一部削除みたいになるから、非正規化データの更新スピードもそこまで重くないだろうし
					・いや、グローバルステートも含めれば3段階のミューテーションだ…まあいいかUXのためだ
				・いや、やっぱ非正規化はしない。グローバルステートに保存も特にはしない。
